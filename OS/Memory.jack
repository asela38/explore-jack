// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap, freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = 0;
        let heap[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array select, current;
        var int block;
        let current = freeList;
        while( (current[1] < size) | (~(current[0] = 0)) ) {
            let current = current[0];
        }
        
        if(current[1] < size) {
            do Sys.error(1);
            return -1;
        }
        
        let block = (current + current[1]) - ( size + 2 );
        
        let block[1] = size;
        
        let current[1] = current[1] - ( size + 2) ;
        
        return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int block;
        var Array current;
        
        let block = o;
        let block = block - 2;
        let block[0] = 0;
        
        let current = freeList;
        while(~( current[0] > 0 )) {
            let current = current[0];
        }
        
        let current[0] = block;
        return;
    }    
}
