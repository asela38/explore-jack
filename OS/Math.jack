// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        
        while( i < 16 )  {
            let twoToThe[i] = twoToThe[i - 1] + twoToThe[i - 1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if( x > 0 ) {
            return x;
        }
       
        return x * -1 ;
    }
    
    function int pow(int x, int y) {
        
        if(y = 0) {
            return 1;
        }
       
        return x * Math.pow( x, y - 1) ;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        
        let shiftedX = x;
        let i = 0;
        while( i < 16 ) {
            if( Math.bit(y, i) ) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        
        return sum;
    }
    
    
    function boolean bit(int x, int i) {
        var int r;
        let r = x | twoToThe[i];
        return r = x;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, sign, ans;
        
        let sign  = 1;
        if( x < 0 ) {
           let sign = sign * -1 ;
        }
        
        if( y < 0 ) {
           let sign = sign * -1 ;
        }
        
        
        let x = Math.abs(x);
        let y = Math.abs(y);
        
        if( (y > x) | ( y = 0 ) | ( x = 0 ) | (y < 0) ) {
            return 0;
        }
        
        let q = Math.divide(x, 2 * y);
        
        if( ( x - ( 2 * q * y ) ) < y ) {
            return 2 * q * sign;
        } else  {
            return  sign * ( 2 * q + 1 );
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, z;
        
        let y = 0;
        let j = 7;
        while ( j > -1 )  {
            let z = Math.pow(y + Math.pow(2, j) , 2);
            if( ( ( z < x ) | ( z = x) ) & ( z > 0 ) )  {
                let y  = y + Math.pow(2, j);
            }
            let j = j - 1;
        }
        
        return y;
    
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if( a > b ) {
            return a;
        } else {
            return b;
        }   
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
         if( a < b ) {
            return a;
        } else {
            return b;
        }   
    }
}
