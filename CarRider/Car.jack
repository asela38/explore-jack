/** Car class */
class Car {

    static int INIT_LOCATION; /** Initial location */
    field int memAddress;     
    field int location;

    /** Constructs a new car with the given location and width. */
    constructor Car new() {
        let INIT_LOCATION = 5002;
        let location = INIT_LOCATION;
        do show();
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }


    /** Moves the car right. */
    method void moveRight() {
 
        do hide();
        if(location > INIT_LOCATION) {
            let location = location - 1;
        }
        do show();

        return;
    }
    
    /** Moves the car left. */
    method void moveLeft() {
    
        do hide();
        if(location < ( INIT_LOCATION + 2 ) ) {
            let location = location  + 1;
        }
        do show();

        return;
    }

    /** Show car */
    method void show() {

        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 384);
        do Memory.poke(memAddress+32, -7225);
        do Memory.poke(memAddress+64, -7225);
        do Memory.poke(memAddress+96, -1);
        do Memory.poke(memAddress+128, -7225);
        do Memory.poke(memAddress+160, -7225);
        do Memory.poke(memAddress+192, 960);
        do Memory.poke(memAddress+224, 384);
        do Memory.poke(memAddress+256, 384);
        do Memory.poke(memAddress+288, 960);
        do Memory.poke(memAddress+320, -7225);
        do Memory.poke(memAddress+352, -7225);
        do Memory.poke(memAddress+384, -1);
        do Memory.poke(memAddress+416, -7225);
        do Memory.poke(memAddress+448, -7225);
        do Memory.poke(memAddress+480, 960);
        
        return;
    }
    
    /** Hide car */
    method void hide() {

        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        
        return;
    }

}