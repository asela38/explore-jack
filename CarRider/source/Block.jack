/**
 Block Class
*/
class Block {
    static int INIT_LOCATION; // Initial location for the block to be created
    field int memAddress; // memory Address
    field int location;   // location for the block
    field int offset;     // Offset for the block for next cycle
    field int pass;       // Number of blocks successfully passed
    field boolean hit;    // whether the block hit the car
    field int current;    // Current memory
    field int magic;      // Magic number for the block ( Unique id )
   
    /** Constructs a new car with the given location and width. */
    constructor Block new(int i_magic) {
        let INIT_LOCATION = 10 ;
        let location = INIT_LOCATION + i_magic;
        let offset = 0;
        let hit = false;
        let pass = 0;
        let magic = i_magic;
        do moveDown();
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
    
    /** Return Hit status */
    method boolean isHit() {
        return hit;
    }
    
    /** Return pass count */
    method int pass() {
        return pass;
    }


    /** Moves the bat one step in the bat's direction. */
    method void moveDown() {
 
        do hide();
        if(location < 7000) {
            let location = location + 192;
        } else {
            let offset = offset + 17;
            while(offset > 1) {
                let offset = offset - 2;
            }
            let offset = offset;
            let location = INIT_LOCATION + offset + magic;
            let pass = pass + 1;
        }
        do show();

        return;
    }

    
    /** Show the block */
    method void show() {

        let memAddress = 16384+location;
        let current = Memory.peek(memAddress+0);
        
        // Check block hit car
        if((~( current = 0))) { let hit = true; }
        let current = Memory.peek(memAddress+32);
        if(~( current = 0)) { let hit = true; }
        let current = Memory.peek(memAddress+64);
        if(~( current = 0)) { let hit = true; }
        let current = Memory.peek(memAddress+96);
        if(~( current = 0)) { let hit = true; }
        
        let current = Memory.peek(memAddress+128);
        if(~( current = 0)) { let hit = true; }
        let current = Memory.peek(memAddress+160);
        if(~( current = 0)) { let hit = true; }      
        let current = Memory.peek(memAddress+192);
        if(~( current = 0)) { let hit = true; }
        let current = Memory.peek(memAddress+224);
        if(~( current = 0)) { let hit = true; }
        let current = Memory.peek(memAddress+256);
        if(~( current = 0)) { let hit = true; }
        let current = Memory.peek(memAddress+288);
        if(~( current = 0)) { let hit = true; }
        let current = Memory.peek(memAddress+320);
        if(~( current = 0)) { let hit = true; }
        let current = Memory.peek(memAddress+352);
        if(~( current = 0)) { let hit = true; }
        let current = Memory.peek(memAddress+384);
        if(~( current = 0)) { let hit = true; }
        let current = Memory.peek(memAddress+416);
        if(~( current = 0)) { let hit = true; }
        let current = Memory.peek(memAddress+448);
        if(~( current = 0)) { let hit = true; }
        let current = Memory.peek(memAddress+480);
        if(~( current = 0)) { let hit = true; }
        
    
        do Memory.poke(memAddress+0, -1);
        do Memory.poke(memAddress+32, -8185);
        do Memory.poke(memAddress+64, -4081);
        do Memory.poke(memAddress+96, -18403);
        do Memory.poke(memAddress+128, -25543);
        do Memory.poke(memAddress+160, -29071);
        do Memory.poke(memAddress+192, -30751);
        do Memory.poke(memAddress+224, -31807);
        do Memory.poke(memAddress+256, -31807);
        do Memory.poke(memAddress+288, -30751);
        do Memory.poke(memAddress+320, -29071);
        do Memory.poke(memAddress+352, -25543);
        do Memory.poke(memAddress+384, -18403);
        do Memory.poke(memAddress+416, -4081);
        do Memory.poke(memAddress+448, -8185);
        do Memory.poke(memAddress+480, -1);
        return;
    }
    
    /** Erase the block */
    method void hide() {

        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

}